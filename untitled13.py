# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BPVgc7m1YxZz1rPOQatL6Blo-rTeEnpk

# Project Title - Predicting Used Car Prices Based on features
# Project Summary
This project delves into a comprehensive car dataset, aiming to uncover valuable insights and patterns hidden within the data. Through meticulous analysis and exploration, we seek to understand the characteristics, relationships, and trends associated with various car attributes.

The dataset encompasses a wide range of car features, including make, model, year, engine size, horsepower, fuel type, transmission, and more. This richness in data provides a solid foundation for extracting meaningful information and building predictive models.

Our primary objective is to explore the relationships between car features and identify key factors that influence car performance, fuel efficiency, and overall desirability. We will employ various data analysis techniques, including descriptive statistics, correlation analysis, and visualization tools.

By examining the distribution of car attributes, we can gain insights into the most common car types, engine sizes, fuel preferences, and transmission choices. Furthermore, we will investigate the relationships between these attributes and other variables such as horsepower, torque, and fuel economy.

This project will not only enhance our understanding of car characteristics but also lay the groundwork for future predictive modeling. By identifying significant features and relationships, we can develop models to predict car prices, fuel consumption, and other essential metrics.

Ultimately, the goal of this project is to provide valuable insights to car buyers, researchers, and enthusiasts alike. Through comprehensive data exploration and analysis, we aim to empower individuals with the knowledge they need to make informed decisions and gain a deeper understanding of the automotive industry.

Deciding whether a used car is worth the posted price when you see listings online can be difficult. Several factors, including mileage, make, model, year, etc. can influence the actual worth of a car. From the perspective of a seller, it is also a dilemma to price a used car appropriately. Based on existing data, the aim is to use machine learning algorithms to develop models for predicting used car prices

# Problem Statement
1.What is the distribution of car ownership types in the dataset?

2.Which fuel type is most commonly used in the dataset?

3.What is the average price of cars for each fuel type?

4.What is the average price of cars in each location?

5.What is the most common car price range?

6.Create a pie chart showing the distribution of cars by fuel type

7.Which transmission type has the higher average price?

8.What is the relationship between the car's name and its price?

9.What is the relationship between the number of seats and the price of a car?

10.What percentage of cars in the dataset are located in Mumbai?

11.Create a pairplot for Dataset?

12.Which car brand has the highest average price in the dataset?

13.What is the relationship between the car's year and its price

14.Which car brand is the most popular in the dataset?

15.Create a violin plot of the car prices by transmission type

16.What is the correlation coefficient between car price and engine size?

17.Which fuel type has a higher average price and What is the distribution of prices for each fuel type?

## Import the Neccesary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib as mlt
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load The DataSet"""

df=pd.read_csv('/content/dataset.csv')
df

"""# About Dataset:
Name: The name of the car model.

location: The location where the car is being sold.

Year: The year in which the car was manufactured.

km_Driven:The number of kilometers the car has been driven.

Fuel_Type:The type of fuel the car uses (e.g., petrol, diesel, CNG,LPG).

 Transmission: The type of transmission the car has (e.g., manual, automatic).

 Owner_Type: The number of previous owners the car has had.

 Mileage:The fuel efficiency of the car in kilometers per liter.

 Engine:The size of the car's engine in cubic centimeters.

Power:The maximum power output of the car's engine in bhp.

Seats: The number of seats in the car.

Price:The price at which the car is being sold.

# Data Exploration and Data Cleaning
"""

df.head(5)

df.tail(5)

df.info()

"""The dataset contains 6019 entries and 13 columns and some columns has missing values
The data types of the columns are appropriate.
There is an additional unnamed column that contains no data.
datatypes are int64,float,and object
"""

df.shape

"""The shape of the DataFrame"""

df.describe()

"""The describe() method generates descriptive statistics that summarize the central tendency, dispersion, and shape of a dataset's distribution.
 These statistics include the count, mean, standard deviation, minimum, maximum, and quartiles of each column in the DataFrame.
"""

df.duplicated().sum()

"""Counts the number of duplicate rows in the DataFrame"""

df.isnull().sum()

"""Checking how many null values are there in each column and found some column has null values

So here we dont require Unamed:0 and New_Price column as there is more null values and no data is found so dropping that two columns
"""

df.drop(columns=['Unnamed: 0','New_Price'],inplace=True)

df

df.dropna(inplace=True)

"""df.dropna() method removes any rows that contain missing values (NaN).
 By default, it removes any rows that have at least one missing value.
"""

df['Name'][0]

def company_name(x):
    if " " in x:
        return x[:x.index(" ")]
    else:
        return x

df['Name'] = df['Name'].apply(company_name)

"""company_name that takes a string as input and returns the first word in the string."""

df.head(3)

df["Name"].value_counts()

df.drop(df.loc[df['Name'] == '#'].index, inplace=True)
df.drop(df.loc[df['Name'] == '56'].index, inplace=True)

"""Dropping two rows of Name Column which is invalid"""

df["Location"].unique()

df["Year"].value_counts()

df["Kilometers_Driven"]

df["Kilometers_Driven"].unique()

df["Kilometers_Driven"] = df["Kilometers_Driven"].astype(int)

"""Converting Float to int values"""

df.head(3)

df['Fuel_Type'].value_counts()

df["Fuel_Type"] = df["Fuel_Type"].replace(["0", "$", "%", "#", ")(", "^", "#@", "u7"], np.nan)

"""Replaces specific invalid values in the "Fuel_Type" column with NaN missing value.
This is done to clean the data and remove any potential errors or inconsistencies.

"""

df['Fuel_Type'].unique()

df.drop(df.loc[df['Fuel_Type'] == 'nan'].index, inplace=True)

df.info()

df.sample(5)

df["Transmission"].value_counts()

df["Owner_Type"].value_counts()

df['Mileage'].unique()

df['Engine'].dtype

def clean_engine(engine_string):
  """
  This function cleans the engine string by removing "CC" and converting to float.
  """
  if isinstance(engine_string, str):
    return float(engine_string.replace("CC", ""))
  else:
    return engine_string

df['Engine'] = df['Engine'].apply(clean_engine)
df.head()

"""This function cleans the engine string by removing "CC" and converting to float."""

#convert Engine column data into int

df['Engine'] = df['Engine'].astype(int)

df

df["Seats"].value_counts()

df['Seats'] = df['Seats'].astype(int)

df = df[df["Seats"] != 0]

df

df.describe()

"""#  Data Visualization

# 1.What is the distribution of car ownership types in the dataset?
"""

owner_type_counts = df['Owner_Type'].value_counts()
sns.barplot(x=owner_type_counts.index, y=owner_type_counts.values)
plt.title('Number of Cars for Each Owner Type')
plt.xlabel('Owner Type')
plt.ylabel('Number of Cars')
plt.show()

"""# Observation
The most common owner type is 'First Owner', accounting for over 50% of the cars in the dataset.

'Second Owner' and 'Third Owner' are also relatively common, each representing around 20% of the cars.

 'Fourth & Above Owner' and 'Test Drive Car' are the least common owner types, each accounting for less than 5% of the cars

# 2.Which fuel type is most commonly used in the dataset?
"""

fuel_type_counts = df['Fuel_Type'].value_counts()
sns.barplot(x=fuel_type_counts.index, y=fuel_type_counts.values)
plt.title('Number of Cars for Each Fuel Type')
plt.xlabel('Fuel Type')
plt.ylabel('Number of Cars')
plt.show()

"""# Observation
vehicles using diesel are more compared to the petrol, CNG and LPG

# 3.What is the average price of cars for each fuel type?
"""

sns.barplot(y=df['Price'], x=df['Fuel_Type'])

"""# Observation
Diesel cars have the highest average price, followed by Petrol cars. CNG and LPG cars have the lowest average prices.

# 4.What is the average price of cars in each location?
"""

sns.barplot(y="Location", x="Price", data=df)

"""# Observation
 Coimbatore and Bangalore can be seen to have the highest prices, and Kolkata having the least.

#5.What is the most common car price range?
"""

sns.histplot(df['Price'], bins=10)
plt.title('Distribution of Car Prices')
plt.xlabel('Price in lacs')
plt.ylabel('Number of Cars')
plt.show()

"""# Observation
The most common car price range is between 100,000 and 200,000.

# 6.Create a pie chart showing the distribution of cars by fuel type
"""

fuel_type_counts = df['Fuel_Type'].value_counts()

plt.figure
plt.pie(fuel_type_counts, labels=fuel_type_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Cars by Fuel Type')
plt.show()

"""# Observation
Diesel cars are the most common, accounting for 58.9% of the cars in the dataset.

Petrol cars are the second most common, accounting for 39.3% of the cars in the dataset.

 CNG and LPG cars are relatively uncommon, accounting for only 1.8% of the cars in the dataset.

# 7.Which transmission type has the higher average price?
"""

sns.barplot(y=df['Price'], x=df['Transmission'])

"""# Observation
 Cars with automatic transmission have a higher average price compared to cars with manual transmission.

# 8.What is the relationship between the car's name and its price?
"""

plt.scatter(df['Name'], df['Price'])
plt.xlabel('Name')
plt.ylabel('Price')
plt.title('Price vs Name')
plt.show()

"""# Observation
This means that cars with more expensive names tend to have higher prices. However, there are also some exceptions to this trend. For example, the car with the name "Maruti 800" has a relatively low price, while the car with the name "BMW X1" has a relatively high price.

# 9.What is the relationship between the number of seats and the price of a car?
"""

plt.scatter(df['Seats'], df['Price'])
plt.xlabel('Seats')
plt.ylabel('Price')
plt.title('Price vs Seats')
plt.show()

"""#Observation
This means that cars with more seats tend to have higher prices. However, there are also some exceptions to this trend. For example, some cars with a low number of seats, such as the Maruti 800, have relatively high prices, while some cars with a high number of seats, such as the Mahindra XUV500, have relatively low prices.

# 10.What percentage of cars in the dataset are located in Mumbai?
"""

location_counts = df['Location'].value_counts()

plt.figure()
plt.pie(location_counts, labels=location_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Cars by Location')
plt.show()

"""# Observation
 Approximately 16.1% of the cars in the dataset are located in Mumbai.

# 11.Create a pairplot for Dataset?
"""

sns.pairplot(df)
plt.show()

"""1. is a positive correlation between the car's price and its engine size.
2. There is a positive correlation between the car's price and its horsepower.
3. There is a negative correlation between the car's price and its mileage.
4. There is a positive correlation between the car's price and its number of seats.
5. There is a positive correlation between the car's price and its year of manufacture.
6. There is a positive correlation between the car's price and its fuel type (diesel cars are more expensive than petrol cars).
7. There is a positive correlation between the car's price and its transmission type (automatic cars are more expensive than manual cars).
8. There is a positive correlation between the car's price and its location (cars in Mumbai are more expensive than cars in other cities).

# 12.Which car brand has the highest average price in the dataset?
"""

fig, ax = plt.subplots(figsize=(28,10))
sns.barplot(x="Name", y="Price", data=df)

"""# Observation
From the bar plot, we can see that the car brand "BMW X1" has the highest average price in the dataset.

# 13.What is the relationship between the car's year and its price?
"""

fig, ax = plt.subplots(figsize=(19,10))
sns.barplot(x="Year", y="Price", data=df)

"""# Observation
As we already know Newer the car, higher the price

# 14.Which car brand is the most popular in the dataset?
"""

sns.countplot(x = 'Name', data = df)
plt.xticks(rotation = 90)

"""# Observation
we can see that the car brand "Maruti" is the most popular in the dataset

#15.Create a violin plot of the car prices by transmission type
"""

sns.violinplot(x = "Transmission", y = "Price", data = df)
plt.show()

"""#Observation

 The violin plot shows that cars with automatic transmission tend to have higher prices than cars with manual transmission.

The median price for automatic cars is around 8 lakhs, while the median price for manual cars is around 5 lakhs.

 There is also a wider range of prices for automatic cars compared to manual cars, indicating that there is more variation in the prices of automatic cars.

#16. What is the correlation coefficient between car price and engine size?
"""

sns.jointplot(x = "Engine", y = "Price", data = df)
plt.title("Relationship between Car Price and Engine Size")
plt.show()

"""# Observation

 The jointplot shows a positive correlation between car price and engine size.
This means that cars with larger engines tend to have higher prices.
 However, there is also some variation in the data, with some cars with small engines having high prices and some cars with large engines having low prices.

#  17.Which fuel type has a higher average price and What is the distribution of prices for each fuel type?
"""

plt.figure(figsize=(10, 6))
sns.boxplot(x = df['Fuel_Type'], y = df['Price'])
plt.title('Boxplot of Price by Fuel Type')
plt.xlabel('Fuel Type')
plt.ylabel('Price')
plt.show()

"""observation:
 Diesel cars have a higher median price compared to petrol cars.
 There is a wider range of prices for petrol cars compared to diesel cars.

# Conclusion:
In conclusion, the provided car dataset reveals valuable insights into the characteristics, relationships, and trends associated with various car attributes. Through comprehensive analysis and exploration, we gained a deeper understanding of car ownership patterns, fuel preferences, pricing trends, and location-based variations.

The analysis highlighted that the majority of cars in the dataset have a single owner, with diesel being the most commonly used fuel type. We observed a positive correlation between car price and engine size, horsepower, number of seats, and year of manufacture. Additionally, automatic transmission cars commanded higher prices compared to manual transmission cars.

Furthermore, the geographical distribution of car prices revealed that Mumbai had the highest average price, while Kolkata had the lowest. The most popular car brand in the dataset was Maruti, while BMW X1 had the highest average price.

Ultimately, this analysis provides valuable insights to car buyers, researchers, and enthusiasts alike. By leveraging the extracted knowledge, individuals can make informed decisions when purchasing or selling a used car.

# THANK YOU
"""